{
	"GCD": {
		"prefix": "gcd",
		"body": [
			"//GCD(最大公約数)",
			"ll gcd(ll a, ll b) {",
			"   if(a < b) return gcd(b, a);",
			"   if(b == 0) return a;",
			"   return gcd(b, a % b);",
			"}"
		]
	},

	"LCM": {
		"prefix": "lcm",
		"body": [
			"//LCM(最小公倍数)",
			"ll lcm(ll a, ll b) {",
			"   return a / gcd(a, b) * b;  //オーバーフローする場合など 必要に応じて",
			"}"
		]
	},

	"INF(long long)": {
		"prefix": "infl",
		"body": [
			"const ll INF = 1LL<<60;"
		]
	},

	"MOD": {
		"prefix": "mod",
		"body": [
			"const ll MOD = 1e9 + 7;"
		]
	},

	"chmax & chmin": {
		"prefix": "chm",
		"body": [
			"template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }",
			"template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }"
		]
	},

	"min_priority_queue": {
		"prefix": "min_priority_queue",
		"body": [
			"template<typename T> using min_priority_queue = priority_queue<T, vector<T>, greater<T>>;"
		]
	},

	"all": {
		"prefix": "all",
		"body": [
			"#define all(x) (x).begin(),(x).end()"
		]
	},

	"reverse_all": {
		"prefix": "rall",
		"body": "#define rall(x) (x).rbegin(),(x).rend()"
	},

	"二項係数：nck": {
		"prefix": "comb",
		"body": [
			"//二項係数 nCk mod p",
			"//aのp乗を求める",
			"ll modpow(ll a, int p) {",
    		"   if(p == 0) return 1;",
   			"   if(p % 2 == 0) {",
        	"      int halfP = p / 2;",
        	"      ll half = modpow(a, halfP);",
        	"      //a^(p/2)をhalfとして、half*halfを計算",
        	"      return half * half % MOD;",
    		"   } else {",
        	"      //pが奇数のときは偶数にするために1減らす",
        	"      return a * modpow(a, p-1) % MOD;",
    		"   }",
			"}",

			"//二項係数の計算",
			"//10C3 (10*9*8) / (3*2*1)",
			"//(10*9*8):ansMul (3*2*1):ansDiv",
			"ll calcComb(int a, int b) {",
			"   if(b > a - b) return calcComb(a, a - b);",
				"",
    		"   ll ansMul = 1;",
    		"   ll ansDiv = 1;",
   			"   rep(i, b) {",
       		"       ansMul *= (a - i);",
        	"       ansDiv *= (i + 1);",
        	"       ansMul %= MOD;",
        	"       ansDiv %= MOD;",
    		"   }",
    		"   //ansMul / ansDiv をしたい",
    		"   //ansDivの逆元を求める",
			"   ll ans = ansMul * modpow(ansDiv, MOD - 2) % MOD;",
				"",
    		"   return ans;",
			"}"
		]
	},

	"素数判定：isPrime": {
		"prefix": "isprime",
		"body": [
			"//素数判定",
			"bool isPrime(ll n){",
			"   if (n < 2) return false;",
			"   for(int i = 2; i < (ll)(sqrt(n) + 1); i++) {",
			"      if (n % i == 0) return false;",
			"   }",
			"   return true;",
			"}"
		]
	},

	"エラトステネスの篩": {
		"prefix": "Eratosthenes",
		"body": [
			"//エラトステネスの篩",
			"int isPrime[MAX];",
			"void Eratosthenes(int n) {",
    		"   for(int i = 0; i <= n; i++) isPrime[i] = 1;",
   			"   isPrime[0] = 0; isPrime[1] = 0;",
    		"   for(int i = 2; i <= n; i++) {",
       		"      if(isPrime[i]) {",
           	"         for(int j = 2 * i; j <= n; j += i) {",
            "            isPrime[j] = 0;",                
           	"         }",	
        	"      }",
   			"   }",
			"}"
		]
	},

	"PI": {
		"prefix": "pi",
		"body": [
			"const double PI=acos(-1.0);"
		]
	},

	"Direction4": {
		"prefix": "dire4",
		"body": [
			"const int dx[4] = {-1, 0, 1, 0};",
			"const int dy[4] = {0, -1, 0, 1};"
		]	
	},

	"Direction8": {
		"prefix": "dire8",
		"body": [
			"const int dx[8] = {0, 1, 1, 1, 0, -1, -1, -1};",
			"const int dy[8] = {1, 1, 0, -1, -1, -1, 0, 1};"
		]
	},

	"桁数": {
		"prefix": "keta",
		"body": [
			"//桁数",
			"bool f(int x) {",
    		"   int keta = 0;",
    		"   while(x > 0) {",
        	"       x /= 10;",
        	"       keta++;",
    		"   }",
    		"   if(keta % 2 == 1) return true;",
    		"   else return false;",
			"}"
		]	
	},

	"約数列挙": {
		"prefix": "divisor",
		"body": [
			"//約数列挙",
			"vll d;",
			"void divisor(ll n) {",
    		"   for(ll i = 1; i * i <= n; i++) {",
        	"       if(n % i == 0) {",
            "           d.push_back(i);",
            "           if(i * i != n) d.push_back(n / i);",
        	"       }",
    		"   }",
    		"   sort(all(d));",
    		"   return;",
			"}"
		]
	},

	"素因数分解": {
		"prefix": "factorize",
		"body": [
			"//素因数分解",
			"vector<pair<ll, int>> factorize(ll n) {",
   			"\tvector<pair<ll, int>> res;",
    		"\tfor(ll i = 2; i * i <= n; i++) {",
        	"\t\tif(n % i) continue;",
        	"\t\tres.emplace_back(i, 0);",
        	"\t\twhile(n % i == 0) {",
            "\t\t\tn /= i;",
            "\t\t\tres.back().second++;",
        	"\t\t}",
    		"\t}",
    		"\tif(n != 1) res.emplace_back(n, 1);",
   			"\treturn res;",
			"}"
		]
	},

	"出力": {
		"prefix": "out",
		"body": "cout << $1 << endl;"
	},

	"cmp": {
		"prefix": "cmp",
		"body": "bool cmp(pint a, pint b) {return a.second < b.second;}"
	},

	"Union-Find(Old)": {
		"prefix": "unionfind",
		"body": [
			"//親の番号",
			"int par[100100];",
			"",
			"//n要素で初期化",
			"void init(int n) {",
			    "\trep(i, n) par[i] = i;",
			"}",
			"",
			"//木の根を求める",
			"int root(int x) {",
			    "\tif(par[x] == x) {   //根",
			        "\t\treturn x;",
			    "\t} else {",
			        "\t\treturn par[x] = root(par[x]);   //経路圧縮",
			    "\t}",
			"}",
			"",
			"//x と yが同じ要素に属するか否か",
			"bool same(int x, int y) {",
			    "\treturn root(x) == root(y);",
			"}",
			"",
			"//x と y の属する集合を併合",
			"void unite(int x, int y) {",
			    "\tx = root(x);",
			    "\ty = root(y);",
				"\tif(x == y) return;",
				"",
			    "\tpar[x] = y;",
			"}"
		]
	},

	"priority_queue_greater": {
		"prefix": "pqg",
		"body": [
			"// int 型の要素を持ち、最も小さい値を取り出す形の priority_queue を定義する場合",
			"priority_queue<int, vector<int>, greater<int>> $1;"
		]
	},

	"priority_queue_less": {
		"prefix": "pql",
		"body":[
			"// int 型の要素を持ち、最も大きい値を取り出す形の priority_queue を定義する場合",
			"priority_queue<int, vector<int>, less<int>> $1;"
		]	
	},

	"builtin_popcount": {
		"prefix": "popcnt",
		"body": "__builtin_popcount($1)"
	},

	"INF(int)":{
		"prefix": "infi",
		"body": "const int INF = 1001001001;"
	},

	"Union-Find(New)": {
		"prefix": "uf",
		"body": [
			"struct UnionFind {",
			"\tvi d;",
			"\tUnionFind(int n = 0): d(n, -1) {}   //子：親のID　親：-サイズ",
			"\tint find(int x) {",
			"\t\tif(d[x] < 0) return x;",
			"\t\treturn d[x] = find(d[x]);",
			"\t}",
			"\tbool unite(int x, int y) {",
			"\t\tx = find(x); y = find(y);",
			"\t\tif(x == y) return false;",
			"\t\tif(d[x] > d[y]) swap(x, y); //サイズが大きい方にくっつける。 （-サイズ）なので数が小さい方がサイズは大きい",
			"\t\td[x] += d[y];",
					"\t\td[y] = x;",
					"\t\treturn true;",
				"\t}",
				"\tbool same(int x, int y) { return find(x) == find(y); }",
				"\tint size(int x) {return -d[find(x)];}",
			"};"
		]
	}
}